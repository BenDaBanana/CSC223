
/**
 * Minesweeper
 *
 * Ben Graham
 * Version 8, 26/06/24
 */
import java.util.Scanner;
public class Minesweeper
{
    public static void main(String[] args){
        Scanner keyboard = new Scanner(System.in);
        String[][] grid = new String[1][1];
        String option;
        int bombs = 0;  //setup variables
        char playerXLetter;
        int playerXGuess = 0;
        int playerYGuess;
        int xMax;
        int yMax;
        char maxLetter = 'A';
        int bombXPosition;
        int bombYPosition;
        int hiddenTiles;
        boolean gameWon = false;
        boolean rightInput = true;
        boolean firstTurn = true;
        boolean letterInput;
        boolean isFlagging = false;
        
        while(rightInput){
            System.out.println('\u000c');
            System.out.println("What size would you like your game: small, medium or large?"); 
            option = keyboard.nextLine();
            
            //setup for size of the game
            if((option.toLowerCase()).equals("small")){ 
                grid = new String[10][8];
                bombs = 10;
                rightInput = false;
            } else if((option.toLowerCase()).equals("medium")){
                 grid = new String[18][14];
                 bombs = 40;
                 rightInput = false;
            } else if((option.toLowerCase()).equals("large")){
                 grid = new String[30][26];
                 bombs = 125;
                 rightInput = false;
            }
        }
        xMax = grid[0].length;
        yMax = grid.length;
        
        for(int y=0; y<yMax; y++){  // setup grid with blank squares
            for(int x=0; x<xMax; x++){
                grid[y][x] = "hidden";
                
            } 
        }
        
        printGrid(grid, '.');
        
        while (gameWon == false){
            hiddenTiles = 0;
            rightInput = true;
            while(rightInput){
                System.out.println("would you like to dig a square or flag a square (D or F)");
                option = keyboard.nextLine();
                if(option.equals("D")){
                        isFlagging = false;
                        rightInput = false;
                } else if(option.equals("F")){
                        isFlagging = true;
                        rightInput = false;
                }
            }
            
            letterInput = true;
            System.out.println("enter X coordinate");
            playerXGuess = getInput(xMax, letterInput);
            while(playerXGuess < 1 || playerXGuess > xMax){
                System.out.println("ERROR, enter X coordinate between A and "+ (char)(maxLetter + xMax-1));
                playerXGuess = getInput(xMax, letterInput);
            }
            
            letterInput = false;
            System.out.println("enter Y coordinate");
            playerYGuess = getInput(yMax, letterInput); // get input for y coordinate
            while(playerYGuess < 1 || playerYGuess > yMax){
                System.out.println("ERROR, enter Y coordinate between 1 and " +yMax);
                playerYGuess = getInput(yMax, letterInput);
            }
            
            //makes the first turn always a cascade
            if(firstTurn){
                    for(int y=playerYGuess-2; y<playerYGuess+1;y++){
                        for(int x=playerXGuess-2; x<playerXGuess+1;x++){
                            try{
                            grid[y][x] = "marked"; //prevent bombs from spawning around first guess
                            }catch(Exception E){}
                        }
                }  
                while(bombs > 0){
                    bombYPosition = (int)Math.floor(Math.random() * grid.length);
                    bombXPosition = (int)Math.floor(Math.random() * grid[0].length);
                    
                    //place bombs in random positions
                    if(grid[bombYPosition][bombXPosition] != "bomb" && grid[bombYPosition][bombXPosition] != "marked"){
                            System.out.println(grid[bombYPosition][bombXPosition]);
                            grid[bombYPosition][bombXPosition] = "bomb";
                            bombs --;
                    }
                }
            }
            
            //reveal selected square
            if(isFlagging){
                grid[playerYGuess-1][playerXGuess-1] = "F";
            } else if(grid[playerYGuess-1][playerXGuess-1].equals("hidden")|| grid[playerYGuess-1][playerXGuess-1].equals("marked")){ // if checked square isn't a bomb
                grid[playerYGuess-1][playerXGuess-1] = surroundingBombs(grid, playerYGuess-1, playerXGuess-1);
            } else if( grid[playerYGuess-1][playerXGuess-1].equals("bomb")){
                gameWon = true;
                printGrid(grid, 'x');
                System.out.println("Game Over"); //ends game if guessed square is a bomb
            }
            
            
            
            
            //checks all squares, if all non bombs have been revealed, end game
             for(int x=0; x<grid.length; x++){
                for(int y=0; y<grid[0].length; y++){
                    if(grid[x][y].equals("hidden")){
                        hiddenTiles++;
                    }
                } 
            }
            if(hiddenTiles== 0){
                gameWon = true;
                printGrid(grid, 'x');
                System.out.println("Game Won, good job");
            }
            
            //continue game loop
            if(gameWon == false){
                printGrid(grid, '.');
            }
            firstTurn = false;
        }
    }   

    static void printGrid(String[][] grid, char bombChar){
        System.out.println('\u000c');
        System.out.print("  ");
        
        for(char c = 'A'; c < 'A'+ grid[0].length; c++){
            System.out.print(" " + c + "  ") ;  
        }
        System.out.println();
        
        for(int y=0; y<grid.length; y++){
            for(int x=0; x<grid[0].length; x++){
                if(x == 0){
                    if (y > 8){
                        System.out.print(y+1);  
                    
                    } else{
                        System.out.print(y+1 + " ");
                    }
                }
                if(grid[y][x].equals("hidden")){
                    System.out.print(" .  " );
                } else if (grid[y][x].equals("bomb")){
                    System.out.print(" " + bombChar + "  " );
                }else if (grid[y][x].equals("0")){
                    System.out.print("    " );
                }else {
                    System.out.print(" " + grid[y][x] + "  ");
                }
            } 
            System.out.println();
        }    
    } 
    
    static int getInput(int max, boolean letterInput){
        Scanner keyboard = new Scanner(System.in);
        int playerGuess;
        char playerLetter;
        if(letterInput){
                playerLetter = keyboard.next().charAt(0);
                playerGuess = Character.toUpperCase(playerLetter) - 64;
        }else{
            while(!keyboard.hasNextInt()){
                 keyboard.nextLine();
                 System.out.println("input error, please enter an integer between 1-"+max);
            }
            playerGuess = keyboard.nextInt();
        }
        return(playerGuess); 
    } 
    
    static String surroundingBombs(String[][] grid, int yCoordinate, int xCoordinate){
        int bombNum = 0;
        for(int y=yCoordinate-1; y<yCoordinate+2;y++){
                for(int x=xCoordinate-1; x<xCoordinate+2;x++){
                    try{
                        if(grid[y][x].equals("bomb")){
                            bombNum++;
                        }
                    } catch(Exception e){}
            }
        } 
        if(bombNum == 0){
            grid[yCoordinate][xCoordinate] = "zero";
            cascade(grid, yCoordinate, xCoordinate);
        }
        String bombString = Integer.toString(bombNum);
        return(bombString);
    }
    
    static void cascade(String[][] grid, int yCoordinate, int xCoordinate){
        for(int y=yCoordinate-1; y<yCoordinate+2;y++){
                for(int x=xCoordinate-1; x<xCoordinate+2;x++){
                    try{
                        if(grid[y][x] != grid[yCoordinate][xCoordinate]){
                            if(grid[y][x] == "hidden" || grid[y][x] == "marked"){
                                grid[y][x] = surroundingBombs(grid, y, x);
                        }
                        }
                    } catch(Exception e){}
            }
        } 
       
    }
}
